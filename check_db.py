import asyncio
import asyncpg
from app.core.config import settings
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def detailed_db_check():
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        logger.info("=== –ü–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î ===")
        logger.info(f"Host: localhost")
        logger.info(f"Port: {settings.POSTGRES_PORT}")
        logger.info(f"User: {settings.POSTGRES_USER}")
        logger.info(f"Database: {settings.POSTGRES_DB}")
        logger.info("========================================")

        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        conn = await asyncpg.connect(
            host="localhost",
            port=int(settings.POSTGRES_PORT),
            user=settings.POSTGRES_USER,
            password=settings.POSTGRES_PASSWORD,
            database=settings.POSTGRES_DB,
            timeout=30
        )

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        version = await conn.fetchval("SELECT version()")
        current_database = await conn.fetchval("SELECT current_database()")
        current_user = await conn.fetchval("SELECT current_user")

        logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        logger.info(f"PostgreSQL –≤–µ—Ä—Å–∏—è: {version}")
        logger.info(f"–¢–µ–∫—É—â–∞—è –±–∞–∑–∞: {current_database}")
        logger.info(f"–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {current_user}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            privileges = await conn.fetchval("""
                SELECT COUNT(*) FROM information_schema.table_privileges 
                WHERE grantee = $1
            """, settings.POSTGRES_USER)
            logger.info(f"–ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –Ω–∞–π–¥–µ–Ω–æ {privileges} –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π")
        except Exception as priv_error:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏: {priv_error}")

        await conn.close()
        return True

    except asyncpg.InvalidPasswordError:
        logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return False
    except asyncpg.InvalidAuthorizationSpecificationError:
        logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return False
    except asyncpg.ConnectionDoesNotExistError:
        logger.error("‚ùå –°–µ—Ä–≤–µ—Ä PostgreSQL –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {type(e).__name__}: {e}")
        return False


async def check_postgres_service():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å PostgreSQL —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –±–∞–∑–µ
        conn = await asyncpg.connect(
            host="localhost",
            port=int(settings.POSTGRES_PORT),
            user=settings.POSTGRES_USER,
            password=settings.POSTGRES_PASSWORD,
            database="postgres",
            timeout=10
        )
        version = await conn.fetchval("SELECT version()")
        logger.info(f"PostgreSQL —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω: {version}")
        await conn.close()
        return True
    except Exception as e:
        logger.error(f"PostgreSQL —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False


if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å PostgreSQL
    if not asyncio.run(check_postgres_service()):
        logger.error("PostgreSQL —Å–µ—Ä–≤–∏—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        logger.error("1. –ó–∞–ø—É—â–µ–Ω –ª–∏ PostgreSQL —Å–µ—Ä–≤–∏—Å")
        logger.error("2. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –ø–æ—Ä—Ç —É–∫–∞–∑–∞–Ω (–æ–±—ã—á–Ω–æ 5432)")
        logger.error("3. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ª–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    else:
        # –ü–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        success = asyncio.run(detailed_db_check())
        if success:
            print("\nüéâ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\n‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—ã—è–≤–∏–ª–∞ –ø—Ä–æ–±–ª–µ–º—ã!")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª–µ .env")